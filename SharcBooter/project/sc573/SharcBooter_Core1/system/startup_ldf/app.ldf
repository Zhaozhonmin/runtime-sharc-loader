/*
** ADSP-SC573 core 1 linker description file generated on Sep 04, 2018 at 16:37:21.
*/
/*
** Copyright (C) 2000-2017 Analog Devices Inc., All Rights Reserved.
**
** This file is generated automatically based upon the options selected
** in the System Configuration utility. Changes to the LDF configuration
** should be made by modifying the appropriate options rather than editing
** this file. To access the System Configuration utility, double-click the
** system.svc file from a navigation view.
**
** Custom additions can be inserted within the user-modifiable sections,
** these are bounded by comments that start with "$VDSG". Only changes
** placed within these sections are preserved when this file is re-generated.
**
** Product      : CrossCore Embedded Studio
** Tool Version : 6.2.0.0
*/

#define LOADER_STUB_MEMORY
ARCHITECTURE(ADSP-SC573)

/*
** Define a linked library list. Libraries from the command line are included
** in COMMAND_LINE_OBJECTS.
*/
$LIBRARIES = 

/*$VDSG<insert-user-libraries-at-beginning>                     */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-libraries-at-beginning>                     */

    libcc.dlb
   ,libc.dlb
   ,libio.dlb
   ,libosal_noos.dlb
   ,libprofile.dlb
   ,libssl.dlb
   ,libdrv.dlb
   ,libdsp.dlb
   ,libldr.dlb

/*$VDSG<insert-user-libraries-at-end>                           */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-libraries-at-end>                           */

   ;

/*
** Define a linked objects list.
*/
$OBJECTS = 

/*$VDSG<insert-user-objects-at-beginning>                       */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-objects-at-beginning>                       */

    "app_startup.doj"
   ,$COMMAND_LINE_OBJECTS

/*$VDSG<insert-user-objects-at-end>                             */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-objects-at-end>                             */

   ;

/*
** List of all objects and libraries.
*/
$OBJS_LIBS = $OBJECTS, $LIBRARIES;

/*
** List of objects and libraries which prefer internal memory as
** specified by prefersMem attribute.
*/
$OBJS_LIBS_INTERNAL = 

/*$VDSG<insert-libraries-internal>                              */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-libraries-internal>                              */

    $OBJS_LIBS{prefersMem("internal")}

/*$VDSG<insert-libraries-internal-end>                          */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-libraries-internal-end>                          */

   ;

/*
** List of objects and libraries which don't have a preference for
** external memory as specified by prefersMem attribute.
*/
$OBJS_LIBS_NOT_EXTERNAL = 

/*$VDSG<insert-libraries-not-external>                          */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-libraries-not-external>                          */

    $OBJS_LIBS{!prefersMem("external")}

/*$VDSG<insert-libraries-not-external-end>                      */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-libraries-not-external-end>                      */

   ;


/*$VDSG<insert-user-macros>                                     */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-macros>                                     */


MEMORY
{
   // ADSP-SC573 MEMORY MAP.
   // The ADSP-215xx SHARC cores have 5 Mbit L1 RAM split over four blocks.

   // This LDF defines memory sections only in byte format. It is no longer
   // necessary to partition memory for different widths and different
   // input types.

   // The output sections that populate the memory are defined to use
   // one of the following qualifiers:

   //    BW     - byte sections
   //    PM     - PM data/ISA code
   //    DM     - DM data
   //    SW     - VISA code
   //    DATA64 - long word data

   // The linker filters the inputs for each output section to match
   // these output section qualfiers. Each output section uses the same
   // byte memory sections which the linker packs correctly for each
   // qualifier.
   // Notes:
   // 1) The interrupt Vector Table (IVT) code is placed in internal memory
   //    by default and has to use ISA (NW, 48 bit) instructions.


   // ----------------------- L1-Block 0 RAM (1 MBit) ---------------------------
   mem_iv_code             { TYPE(PM RAM) START(0x00090000) END(0x000900a7) WIDTH(48) }
   mem_block0_bw           { TYPE(BW RAM) START(0x002403f0) END(0x0025ffff) WIDTH(8) }


   // ----------------------- L2-RAM (2 MBit) -----------------------------------
   // The 1 MB L2 memory has 8 banks partitions as follows:
   //   bank1   2000_0000   2001_FFFF  16KB uncached - ICC
   //                                  16KB uncached - MCAPI ARM
   //                                  16KB uncached - MCAPI SHARC1
   //                                  16KB uncached - MCAPI SHARC0
   //                                  64KB uncached - ARM
   //   bank2   2002_0000   2003_FFFF 128KB cached   - ARM
   //   bank3   2004_0000   2005_FFFF 128KB cached   - ARM
   //   bank4   2006_0000   2007_FFFF 128KB cached   - ARM
   //   bank5   2008_0000   2009_FFFF 128KB cached   - SHARC1
   //   bank6   200A_0000   200B_FFFF 128KB cached   - SHARC1
   //   bank7   200C_0000   200D_FFFF 128KB cached   - SHARC0
   //   bank8   200E_0000   200F_DFFB 120KB cached   - SHARC0
   //           200F_DFFC   200F_FFFF   8KB cached boot code working area
   //
   // Notes:
   // 1. The boot code claims the last 8KB+4B of L2 SRAM, as working space.
   //    This memory is not bootable, but can be used by the application once
   //    booting is complete (NO_INIT in CCES). Note that if the application
   //    makes use of this space and then calls the Boot Code APIs, the
   //    space may be corrupted. The odd extra 4B is required due to boot
   //    rom issue ABK-208.
   // Definition of uncached parts is still required for the libc's set cache function
   mem_L2B1P1_bw           { TYPE(BW RAM) START(0x20000000) END(0x20003fff) WIDTH(8) }
   mem_L2B1P2_bw           { TYPE(BW RAM) START(0x20004000) END(0x20007fff) WIDTH(8) }
   mem_L2B1P3_bw           { TYPE(BW RAM) START(0x20008000) END(0x2000bfff) WIDTH(8) }
   mem_L2B1P4_bw           { TYPE(BW RAM) START(0x2000c000) END(0x2000ffff) WIDTH(8) }
   mem_L2B1P5_bw           { TYPE(BW RAM) START(0x20010000) END(0x2001ffff) WIDTH(8) }
   //mem_L2B2toB4_bw         { TYPE(BW RAM) START(0x20020000) END(0x2007ffff) WIDTH(8) }
   //mem_L2B5B6_bw           { TYPE(BW RAM) START(0x20080000) END(0x200bcfff) WIDTH(8) }
   //mem_L2B7B8_bw           { TYPE(BW RAM) START(0x200c0000) END(0x200fafff) WIDTH(8) }
   //mem_L2B8BC_bw           { TYPE(BW RAM) START(0x200fdffc) END(0x200fffff) WIDTH(8) }
   // The L2 memory will be used by the loader stub (12KB)
   // Unfortunately the user app would not be able to use this region
   MY_L2_MEM               { TYPE(BW RAM) START(0x200fb000) END(0x200fdffb) WIDTH(8) }

   //#define MY_L2_UNCACHED_MEM mem_L2B1P4_bw
   //#define MY_L2_CACHED_MEM   mem_L2B7B8_bw
   
   /*$VDSG<insert-new-memory-segments>                          */
   /* Text inserted between these $VDSG comments will be preserved */
   /*$VDSG<insert-new-memory-segments>                          */
   
} /* MEMORY */

PROCESSOR SC573_CORE_1
{
   LINK_AGAINST( $COMMAND_LINE_LINK_AGAINST )
   OUTPUT($COMMAND_LINE_OUTPUT_FILE)
   ENTRY(start)
   
   /*$VDSG<insert-user-ldf-commands>                            */
   /* Text inserted between these $VDSG comments will be preserved */
   /*$VDSG<insert-user-ldf-commands>                            */
   
   SECTIONS
   {
      
      /*$VDSG<insert-new-sections-at-iv_code>                   */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<insert-new-sections-at-iv_code>                   */
      

    // ------------------------------------------------------------------
    // Block 0 is primarily used for the interrupt vectors code, stack,
    // heap and DM data.
    // If the entire block3 is cache (64KB or 128KB size) it also includes
    // priority code section.
      
      /*$VDSG<insert-new-sections-for-l1_block0>                */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<insert-new-sections-for-l1_block0>                */
      
      #define IV_CODE dxe_iv_code
      IV_CODE PM
      {
         
         /*$VDSG<insert-new-sections-at-the-start-of-iv_code>   */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-new-sections-at-the-start-of-iv_code>   */
         
         // Interrupt vector code (4 NW instructions per interrupt)
         INPUT_SECTIONS( $OBJECTS(iv_code) )
         
         /*$VDSG<insert-new-sections-at-the-end-of-iv_code>     */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-new-sections-at-the-end-of-iv_code>     */
         
      } > mem_iv_code
      
      dxe_block3_nw_code_prio0 PM
      {
   	     // Highest priority code for block3.
         INPUT_SECTION_ALIGN(2)
         // seg_init must be in L1
         INPUT_SECTIONS( $OBJS_LIBS(seg_init) )
      } > mem_block0_bw

      ___ldf_dmcachesize = 0xffffffff; // DM cache off
      ___ldf_icachesize = 0xffffffff; // instruction cache off
      ___ldf_pmcachesize = 0xffffffff; // PM cache off
    // ------------------------------------------------------------------
    // L2 - core memory

      
      /*$VDSG<insert-new-sections-for-l2>                       */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<insert-new-sections-for-l2>                       */
      // First do inputs for noinit data to the boot code working area memory.
      dxe_l2bootcode_noinit NO_INIT DM
      {
         // L2 no init data.
         INPUT_SECTIONS( $OBJS_LIBS(seg_l2_noinit_data seg_noinit_data) )
      } > MY_L2_MEM
      
      dxe_l2bootcode_noinit_bw NO_INIT BW
      {
         // L2 no init data.
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS( $OBJS_LIBS(seg_l2_noinit_data seg_noinit_data) )
      } > MY_L2_MEM
      
      dxe_l2_cpp_ctors_nw DM
      {
         // C++ global constructors list for word-addressed code.
         FORCE_CONTIGUITY
         __ctors = .;    // __ctors points to the start of the section
         INPUT_SECTIONS( $OBJS_LIBS(seg_ctdm) )
         INPUT_SECTIONS( $OBJS_LIBS(seg_ctdml) )
      } > MY_L2_MEM
      
      dxe_l2_cpp_eh_gdt_nw DM
      {
         // C++ exceptions data table.
         FORCE_CONTIGUITY
         INPUT_SECTIONS( $OBJS_LIBS(.gdt32 .gdt) )
         INPUT_SECTIONS( $OBJS_LIBS(.gdtl32 .gdtl) )
      } > MY_L2_MEM
      
      dxe_l2_cpp_eh_gdt_bw BW
      {
         // C++ exceptions data table.
         INPUT_SECTION_ALIGN(4)
         FORCE_CONTIGUITY
         INPUT_SECTIONS( $OBJS_LIBS(.gdt) )
         INPUT_SECTIONS( $OBJS_LIBS(.gdtl) )
      } > MY_L2_MEM
      
      dxe_l2_cpp_ctors_bw BW
      {
         // C++ global constructors list for byte-addressed code.
         INPUT_SECTION_ALIGN(4)
         FORCE_CONTIGUITY
         _ctors. = .;    // _ctors. points to the start of the section
         INPUT_SECTIONS( $OBJS_LIBS(seg_ctdm) )
         INPUT_SECTIONS( $OBJS_LIBS(seg_ctdml seg_ctdml_bw) )
      } > MY_L2_MEM
      
      dxe_l2_executable_name
      {
         INPUT_SECTION_ALIGN(4)
         EXECUTABLE_NAME(_executable_name.)
      } > MY_L2_MEM
      
      dxe_l2_stack_and_heap_reserve NO_INIT BW
      {
      } > MY_L2_MEM
      
      dxe_l2_sw_code SW
      {
         // VISA code.
         INPUT_SECTION_ALIGN(2)
         FILL(0x1)  // fill gaps in memory with NOPs
         INPUT_SECTIONS( $OBJS_LIBS(seg_l2 seg_l2_swco seg_swco seg_pmco seg_int_code) )
      } > MY_L2_MEM
      
      dxe_l2_nw_code PM
      {
         // ISA code.
         INPUT_SECTION_ALIGN(2)
         INPUT_SECTIONS( $OBJS_LIBS(seg_l2 seg_l2_pmco seg_pmco seg_int_code) )
      } > MY_L2_MEM
      
      dxe_l2_data DM
      {
         // L2 data.
         INPUT_SECTIONS( $OBJS_LIBS(seg_l2 seg_l2_dmda seg_dmda_nw seg_dmda seg_vtbl seg_int_data .rtti .cht .edt) )
      } > MY_L2_MEM
      
      dxe_l2_data_bw BW
      {
         // L2 data.
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS( $OBJS_LIBS(seg_l2 seg_l2_dmda_bw seg_dmda_bw seg_dmda seg_vtbl seg_int_data .rtti .cht .edt) )
      } > MY_L2_MEM
      
      dxe_l2_bsz ZERO_INIT DM
      {
         // L2 zero init data.
         INPUT_SECTIONS( $OBJS_LIBS(seg_l2_bsz_data seg_bsz_data .bss32 .bss) )
      } > MY_L2_MEM
      
      dxe_l2_bsz_bw ZERO_INIT BW
      {
         // L2 zero init data.
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS( $OBJS_LIBS(seg_l2_bsz_data seg_bsz_data .bss8 .bss) )
      } > MY_L2_MEM
      
      dxe_l2_noinit NO_INIT DM
      {
         // L2 no init data.
         INPUT_SECTIONS( $OBJS_LIBS(seg_l2_noinit_data seg_noinit_data) )
      } > MY_L2_MEM
      
      dxe_l2_noinit_bw NO_INIT BW
      {
         // L2 no init data.
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS( $OBJS_LIBS(seg_l2_noinit_data seg_noinit_data) )
      } > MY_L2_MEM
      
      dxe_l2_pm_data PM 32
      {
         // L2 pm data.
         INPUT_SECTIONS( $OBJS_LIBS(seg_pmda_nw seg_pmda) )
      } > MY_L2_MEM
      
      dxe_l2_pm_data_bw BW
      {
         // L2 pm data.
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS( $OBJS_LIBS(seg_pmda) )
      } > MY_L2_MEM

    // ------------------------------------------------------------------
    // L2 - uncached memory

      // Memory at the very start of L2 is dedicated for MCAPI/ICC support.
      // It is used to define a fixed size structure.
      // The labels defined below are used in runtime support for MCAPI and caches.

      //___MCAPI_common_start = MEMORY_START(mem_L2B1P1_bw);
      //___MCAPI_common_end   = MEMORY_END  (mem_L2B1P1_bw);
      //___MCAPI_arm_start    = MEMORY_START(mem_L2B1P2_bw);
      //___MCAPI_arm_end      = MEMORY_END  (mem_L2B1P2_bw);
      //___MCAPI_sharc0_start = MEMORY_START(mem_L2B1P4_bw);
      //___MCAPI_sharc0_end   = MEMORY_END  (mem_L2B1P4_bw);
      //___MCAPI_sharc1_start = MEMORY_START(mem_L2B1P3_bw);
      //___MCAPI_sharc1_end   = MEMORY_END  (mem_L2B1P3_bw);
      //___l2_start           = MEMORY_START(mem_L2B1P1_bw);
      //___l2_end             = MEMORY_END  (mem_L2B8BC_bw);
      ___l2_uncached_start  = MEMORY_START(mem_L2B1P1_bw);
      ___l2_uncached_end    = MEMORY_END  (mem_L2B1P5_bw);    
      //___l2_cached_start    = MEMORY_START(mem_L2B2toB4_bw);
      //___l2_cached_end      = MEMORY_END  (mem_L2B8BC_bw);

    // ------------------------------------------------------------------
    // Complete the stack and heap definitions.

      
      /*$VDSG<before-completing-the-stack-and-heap-definitions>  */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<before-completing-the-stack-and-heap-definitions>  */
      
      dxe_block0_stack_and_heap_expand NO_INIT BW
      {
         INPUT_SECTION_ALIGN(4)
         RESERVE_EXPAND(heaps_and_system_stack_in_L1, heaps_and_system_stack_in_L1_length, 0, 8)
         ldf_stack_space = heaps_and_system_stack_in_L1;
         ldf_stack_end = (ldf_stack_space + (((heaps_and_system_stack_in_L1_length * 2048) / 4096) - 8));
         ldf_stack_length = ldf_stack_end - ldf_stack_space;
         ldf_heap_space = ldf_stack_end + 8;
         ldf_heap_end = (ldf_heap_space + (((heaps_and_system_stack_in_L1_length * 2048) / 4096) - 8));
         ldf_heap_length = ldf_heap_end - ldf_heap_space;
      } > MY_L2_MEM
        
    // ------------------------------------------------------------------

      
      /*$VDSG<insert-new-sections-at-the-end>                   */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<insert-new-sections-at-the-end>                   */
      
   } /* SECTIONS */
} /* SC573_CORE_1 */